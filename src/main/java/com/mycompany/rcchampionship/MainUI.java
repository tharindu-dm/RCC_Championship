/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.rcchampionship;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Formatter;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author thari
 */
public class MainUI extends javax.swing.JFrame {

    ArrayList<DriverDetails> drivers = new ArrayList<>(2);
    ArrayList<RaceDetails> simRaceDL = new ArrayList<>(2);
    ArrayList<ArrayList<RaceDetails>> simRaceDrivers = new ArrayList<>(2);

    String name, team, car, location;
    int age, cp, position;
    String date;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        jSpin_Age.setValue(18);
        LoadSimulatedRace();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel_Functions = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTxtF_Name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTxtF_Car = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTxtF_Team = new javax.swing.JTextField();
        jSpin_Age = new javax.swing.JSpinner();
        jSpin_CurrentPoints = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jBTN_AddDriver = new javax.swing.JButton();
        jBTN_DeleteDriver = new javax.swing.JButton();
        jBTN_UpdateDriver = new javax.swing.JButton();
        jBTN_StandingTable = new javax.swing.JButton();
        LoadData = new javax.swing.JButton();
        jBTN_SimulateRandom = new javax.swing.JButton();
        jBTN_RaceTable = new javax.swing.JButton();
        jBTN_SaveData = new javax.swing.JButton();
        jPnl_DL = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        JCB_Month = new javax.swing.JComboBox();
        JCB_Date = new javax.swing.JComboBox();
        jCB_Location = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTxtA_Status = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("World Rally Cross Championship");

        jPanel_Functions.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Functions"));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Name");

        jTxtF_Name.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTxtF_Name.setToolTipText("Enter Driver Name");
        jTxtF_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtF_NameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Age");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Car");

        jTxtF_Car.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTxtF_Car.setToolTipText("Enter Car Name/Type");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Team");

        jTxtF_Team.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTxtF_Team.setToolTipText("Enter Team Name");
        jTxtF_Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtF_TeamActionPerformed(evt);
            }
        });

        jSpin_Age.setToolTipText("Enter Age");
        jSpin_Age.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpin_AgeStateChanged(evt);
            }
        });

        jSpin_CurrentPoints.setToolTipText("Enter Current Points");
        jSpin_CurrentPoints.setAutoscrolls(true);
        jSpin_CurrentPoints.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpin_CurrentPointsStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Current Points");

        jBTN_AddDriver.setBackground(new java.awt.Color(51, 255, 51));
        jBTN_AddDriver.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_AddDriver.setText("Add");
        jBTN_AddDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_AddDriverActionPerformed(evt);
            }
        });

        jBTN_DeleteDriver.setBackground(new java.awt.Color(255, 102, 102));
        jBTN_DeleteDriver.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_DeleteDriver.setText("Delete");
        jBTN_DeleteDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_DeleteDriverActionPerformed(evt);
            }
        });

        jBTN_UpdateDriver.setBackground(new java.awt.Color(255, 255, 0));
        jBTN_UpdateDriver.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_UpdateDriver.setText("Update");
        jBTN_UpdateDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_UpdateDriverActionPerformed(evt);
            }
        });

        jBTN_StandingTable.setBackground(new java.awt.Color(255, 255, 153));
        jBTN_StandingTable.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_StandingTable.setText("Generate Standing Table");
        jBTN_StandingTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_StandingTableActionPerformed(evt);
            }
        });

        LoadData.setBackground(new java.awt.Color(51, 255, 255));
        LoadData.setForeground(new java.awt.Color(0, 0, 0));
        LoadData.setText("Load Data");
        LoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDataActionPerformed(evt);
            }
        });

        jBTN_SimulateRandom.setBackground(new java.awt.Color(255, 255, 153));
        jBTN_SimulateRandom.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_SimulateRandom.setText("Simulate Random Race");
        jBTN_SimulateRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_SimulateRandomActionPerformed(evt);
            }
        });

        jBTN_RaceTable.setBackground(new java.awt.Color(255, 255, 153));
        jBTN_RaceTable.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_RaceTable.setText("Generate Race Table");
        jBTN_RaceTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_RaceTableActionPerformed(evt);
            }
        });

        jBTN_SaveData.setBackground(new java.awt.Color(153, 255, 153));
        jBTN_SaveData.setForeground(new java.awt.Color(0, 0, 0));
        jBTN_SaveData.setText("Save Data");
        jBTN_SaveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_SaveDataActionPerformed(evt);
            }
        });

        jPnl_DL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Simulated Race Information"));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Date:");

        txtYear.setText("YEAR");
        txtYear.setToolTipText("YEAR");
        txtYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtYearFocusGained(evt);
            }
        });

        JCB_Month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Month:", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        JCB_Month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCB_MonthActionPerformed(evt);
            }
        });

        JCB_Date.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Date:", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jCB_Location.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Location", "Nyirad", "Holjes", "Montalegre", "Barcelona", "Riga", "Norway" }));
        jCB_Location.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCB_LocationItemStateChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Location:");

        javax.swing.GroupLayout jPnl_DLLayout = new javax.swing.GroupLayout(jPnl_DL);
        jPnl_DL.setLayout(jPnl_DLLayout);
        jPnl_DLLayout.setHorizontalGroup(
            jPnl_DLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnl_DLLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPnl_DLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPnl_DLLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JCB_Month, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JCB_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnl_DLLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCB_Location, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPnl_DLLayout.setVerticalGroup(
            jPnl_DLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnl_DLLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnl_DLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCB_Month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCB_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPnl_DLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCB_Location, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_FunctionsLayout = new javax.swing.GroupLayout(jPanel_Functions);
        jPanel_Functions.setLayout(jPanel_FunctionsLayout);
        jPanel_FunctionsLayout.setHorizontalGroup(
            jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBTN_SimulateRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTxtF_Name))
                    .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTxtF_Team))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_FunctionsLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTxtF_Car))
                    .addComponent(jBTN_StandingTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBTN_RaceTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                        .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jBTN_AddDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBTN_DeleteDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBTN_UpdateDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_FunctionsLayout.createSequentialGroup()
                                .addComponent(jPnl_DL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBTN_SaveData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LoadData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                        .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSpin_Age, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSpin_CurrentPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel_FunctionsLayout.setVerticalGroup(
            jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTxtF_Name, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jSpin_Age))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTxtF_Team)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTxtF_Car)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpin_CurrentPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTN_AddDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTN_DeleteDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTN_UpdateDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTN_SaveData, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel_FunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_FunctionsLayout.createSequentialGroup()
                        .addComponent(LoadData, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPnl_DL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBTN_StandingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBTN_RaceTable, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBTN_SimulateRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Status Viewer"));

        jTxtA_Status.setEditable(false);
        jTxtA_Status.setColumns(20);
        jTxtA_Status.setLineWrap(true);
        jTxtA_Status.setRows(5);
        jScrollPane2.setViewportView(jTxtA_Status);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Team", "Car", "Current Points"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_Functions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1266, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_Functions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtF_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtF_NameActionPerformed
        jTxtF_Team.requestFocusInWindow();
    }//GEN-LAST:event_jTxtF_NameActionPerformed

    private void jTxtF_TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtF_TeamActionPerformed
        jTxtF_Car.requestFocusInWindow();
    }//GEN-LAST:event_jTxtF_TeamActionPerformed

    private void jSpin_AgeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpin_AgeStateChanged
        int age = (int) jSpin_Age.getValue();
        if (age < 18 || age > 80) {
            JOptionPane.showConfirmDialog(null, "Age " + age
                    + " seems unusual for a driver!\n Please Recheck", "Age Warning",
                    JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
            jSpin_Age.setValue(18);
        }
    }//GEN-LAST:event_jSpin_AgeStateChanged

    private void jSpin_CurrentPointsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpin_CurrentPointsStateChanged
        int cp = (int) jSpin_CurrentPoints.getValue();
        if (cp < 0) {
            JOptionPane.showConfirmDialog(null, "Current Points Cannot be Negative", "Current Points Warning",
                    JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
            jSpin_CurrentPoints.setValue(0);
        }
    }//GEN-LAST:event_jSpin_CurrentPointsStateChanged

    private void jBTN_AddDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_AddDriverActionPerformed
        name = jTxtF_Name.getText();
        age = (int) jSpin_Age.getValue();
        team = jTxtF_Team.getText();
        car = jTxtF_Car.getText();
        cp = (int) jSpin_CurrentPoints.getValue();

        jTxtA_Status.append("Saving Driver:\nName\t: " + name + "\nAge\t: "
                + age + "\nTeam\t: " + team + "\nCar\t: " + car
                + "\nCurrent Points\t: " + cp + "\n");

        drivers.add(new DriverDetails(name, age, team, car, cp));

        //System.out.println(Arrays.toString(drivers.get(drivers.size() - 1)));
        SaveCurrent();
    }//GEN-LAST:event_jBTN_AddDriverActionPerformed

    private void jBTN_DeleteDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_DeleteDriverActionPerformed
        LoadToCurrent();
        int len = drivers.size();
        for (int i = 0; i < len; i++) {
            name = drivers.get(i).name;
            if (name.equals(jTxtF_Name.getText())) {
                jTxtA_Status.append("\nDriver:\nName\t: " + name + "\nAge\t: "
                        + age + "\nTeam\t: " + team + "\nCar\t: " + car
                        + "\nCurrent Points\t: " + cp + "\nHas been sucessfully deleted from the system\n");
                drivers.remove(i);
            } else {
                int j = i + 1;
                if (j == len) {
                    JOptionPane.showConfirmDialog(null, """
                                            No Driver has been found!
                                            Please recheck.""",
                            "WARINING", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        SaveCurrent();
        LoadToCurrent();

    }//GEN-LAST:event_jBTN_DeleteDriverActionPerformed

    private void jBTN_UpdateDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_UpdateDriverActionPerformed
        LoadToCurrent();
        int len = drivers.size();
        for (int i = 0; i < len; i++) {
            name = drivers.get(i).name;
            if (name.equals(jTxtF_Name.getText())) {
                age = (int) jSpin_Age.getValue();
                team = jTxtF_Team.getText();
                car = jTxtF_Car.getText();
                cp = (int) jSpin_CurrentPoints.getValue();

                drivers.remove(i);
                drivers.add(new DriverDetails(name, age, team, car, cp));

                jTxtA_Status.append("\nUpdating Driver:\nName\t: " + name + "\nAge\t: "
                        + age + "\nTeam\t: " + team + "\nCar\t: " + car
                        + "\nCurrent Points\t: " + cp + "\n");
            } else {
                int j = i + 1;
                if (j == len) {
                    JOptionPane.showConfirmDialog(null, """
                                            No Driver has been found!
                                            Please recheck.""",
                            "WARINING", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        SaveCurrent();
        LoadToCurrent();
    }//GEN-LAST:event_jBTN_UpdateDriverActionPerformed

    private void jBTN_SaveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_SaveDataActionPerformed
        JOptionPane.showConfirmDialog(null, """
                                            This operation will Overwrite all current drivers' informations
                                            Including:
                                                Name
                                                Age
                                                Team
                                                Car
                                                CurrentPoints
                                            
                                            And save new data in to the file""",
                "WARINING", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
        SaveCurrent();
    }//GEN-LAST:event_jBTN_SaveDataActionPerformed

    private void LoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDataActionPerformed
        JOptionPane.showConfirmDialog(null, """
                                            This operation will delete all current drivers' informations
                                            Including:
                                                Name
                                                Age
                                                Team
                                                Car
                                                CurrentPoints
                                            
                                            And Load data from information in the saved file""",
                "WARINING", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
        LoadToCurrent();
    }//GEN-LAST:event_LoadDataActionPerformed

    private void jBTN_StandingTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_StandingTableActionPerformed
        DefaultTableModel st = (DefaultTableModel) jTable1.getModel();
        clearTableRows();
        {
            st.setColumnCount(5);
            JTableHeader th = jTable1.getTableHeader();
            TableColumnModel tcm = th.getColumnModel();
            tcm.getColumn(0).setHeaderValue("Name");
            tcm.getColumn(1).setHeaderValue("Age");
            tcm.getColumn(2).setHeaderValue("Team");
            tcm.getColumn(3).setHeaderValue("Car");
            tcm.getColumn(4).setHeaderValue("Current Points");
            th.repaint();
        }

        Collections.sort(drivers, new CPComparator());
        jTxtA_Status.append("\n Preparing Standing Table in Descending order of Current Points\n");
        for (DriverDetails dd : drivers) {
            Vector v = new Vector();
            v.add(dd.name);
            v.add(dd.age);
            v.add(dd.team);
            v.add(dd.car);
            v.add(dd.cp);

            st.addRow(v);
        }
        jTxtA_Status.append("\nTable is ready\n");
    }//GEN-LAST:event_jBTN_StandingTableActionPerformed

    private void jBTN_RaceTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_RaceTableActionPerformed
        Collections.sort(simRaceDL, new DateComparator());
        DefaultTableModel st = (DefaultTableModel) jTable1.getModel();
        clearTableRows();
        {
            st.setColumnCount(2);
            JTableHeader th = jTable1.getTableHeader();
            TableColumnModel tcm = th.getColumnModel();
            tcm.getColumn(0).setHeaderValue("Date");
            tcm.getColumn(1).setHeaderValue("Location");
            th.repaint();
        }
        jTxtA_Status.append("\n Preparing Race Table in Ascending order of date");
        for (RaceDetails rr : simRaceDL) {
            Vector v = new Vector();
            v.add(rr.date);
            v.add(rr.location);
            st.addRow(v);
        }
        jTxtA_Status.append("\nTable is ready\n");

    }//GEN-LAST:event_jBTN_RaceTableActionPerformed

    private void jBTN_SimulateRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_SimulateRandomActionPerformed
        /**
         * 1st - 10cp 2nd - 7cp 3rd - 5cp
         */
        LoadToCurrent();
        DefaultTableModel st = (DefaultTableModel) jTable1.getModel();
        clearTableRows();
        {
            st.setColumnCount(3);
            JTableHeader th = jTable1.getTableHeader();
            TableColumnModel tcm = th.getColumnModel();
            tcm.getColumn(0).setHeaderValue("Name");
            tcm.getColumn(1).setHeaderValue("Current Points");
            tcm.getColumn(2).setHeaderValue("Position");
            th.repaint();
        }

        if (txtYear.getText().equals("") || jCB_Location.getSelectedIndex() == 0 || JCB_Date.getSelectedIndex() == 0 || JCB_Month.getSelectedIndex() == 0) {
            JOptionPane.showConfirmDialog(null, """
                                            Please select race DATE and LOCATION""",
                    "WARINING", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE);
        } else {
            ArrayList<String> prevName = new ArrayList<>(2);
            String currName;
            String month;
            if (0 < JCB_Month.getSelectedIndex() && JCB_Month.getSelectedIndex() < 10) {
                month = "0" + JCB_Month.getSelectedIndex();
            }else{
            month  = JCB_Month.getSelectedIndex()+""; 
            }
            String selectedDate = JCB_Date.getSelectedItem().toString() + "/" + month + "/" + txtYear.getText();
            String selectedLocation = jCB_Location.getSelectedItem().toString();
            jTxtA_Status.append("Simulating a random race\n" + "Date:\t" + selectedDate + "\nLocation:\t" + selectedLocation + "\n");

            simRaceDL.add(new RaceDetails(selectedDate, selectedLocation));
            simRaceDrivers.add(new ArrayList());
            int listNow = simRaceDrivers.size() - 1;

            for (int i = 0; i < drivers.size(); i++) {
                // generating the index using Math.random()
                int index = (int) (Math.random() * drivers.size());
                currName = drivers.get(index).name;

                if (prevName.contains(currName)) {
                    i--;
                } else {
                    prevName.add(currName);
                    jTxtA_Status.append(i + 1 + " place driver:\t" + currName + "\n");
                    switch (i + 1) {
                        case 1 ->
                            drivers.get(index).cp += 10;
                        case 2 ->
                            drivers.get(index).cp += 7;
                        case 3 ->
                            drivers.get(index).cp += 5;
                    }
                    simRaceDrivers.get(listNow).add(new RaceDetails(drivers.get(index).name, drivers.get(index).cp, i + 1));
                }
            }

            Collections.sort(simRaceDrivers.get(listNow), new PositionComparator());
            jTxtA_Status.append("\n Preparing Simulated Race Results Table in Position\n");
            for (RaceDetails rr : simRaceDrivers.get(listNow)) {
                Vector v = new Vector();
                v.add(rr.name);
                v.add(rr.cp);
                v.add(rr.position);

                st.addRow(v);
            }
            jTxtA_Status.append("\nTable is ready\n");

            //SAVE TO THE FILE
            SaveSimulatedRace(listNow);
            SaveCurrent();
            LoadToCurrent();
        }

    }//GEN-LAST:event_jBTN_SimulateRandomActionPerformed

    private void jCB_LocationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCB_LocationItemStateChanged
        if (jCB_Location.getSelectedIndex() == 0)
            JOptionPane.showConfirmDialog(null,
                    "Please select a location", "WARINING",
                    JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jCB_LocationItemStateChanged

    private void JCB_MonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCB_MonthActionPerformed
        boolean mxd = JCB_Month.getSelectedIndex() == 1
                || JCB_Month.getSelectedIndex() == 3
                || JCB_Month.getSelectedIndex() == 5
                || JCB_Month.getSelectedIndex() == 7
                || JCB_Month.getSelectedIndex() == 8
                || JCB_Month.getSelectedIndex() == 10
                || JCB_Month.getSelectedIndex() == 12;

        boolean lxd
                = JCB_Month.getSelectedIndex() == 4
                || JCB_Month.getSelectedIndex() == 6
                || JCB_Month.getSelectedIndex() == 9
                || JCB_Month.getSelectedIndex() == 11;

        if (JCB_Month.getSelectedIndex() == 2) {
            JCB_Date.removeItemAt(31);
            JCB_Date.removeItemAt(30);
        } else if (lxd) {

            int a = JCB_Date.getItemCount() - 1;

            if (a == 29) {
                JCB_Date.addItem("30");
            } else if (a == 31) {
                JCB_Date.removeItemAt(31);
            }

        } else if (mxd) {

            int a = JCB_Date.getItemCount() - 1;

            if (a == 29) {
                JCB_Date.addItem("30");
                JCB_Date.addItem("31");
            } else if (a == 30) {
                JCB_Date.addItem("31");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Choose a month", "Month Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JCB_MonthActionPerformed

    private void txtYearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearFocusGained
        txtYear.setText("");
    }//GEN-LAST:event_txtYearFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox JCB_Date;
    private javax.swing.JComboBox JCB_Month;
    private javax.swing.JButton LoadData;
    private javax.swing.JButton jBTN_AddDriver;
    private javax.swing.JButton jBTN_DeleteDriver;
    private javax.swing.JButton jBTN_RaceTable;
    private javax.swing.JButton jBTN_SaveData;
    private javax.swing.JButton jBTN_SimulateRandom;
    private javax.swing.JButton jBTN_StandingTable;
    private javax.swing.JButton jBTN_UpdateDriver;
    private javax.swing.JComboBox<String> jCB_Location;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_Functions;
    private javax.swing.JPanel jPnl_DL;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpin_Age;
    private javax.swing.JSpinner jSpin_CurrentPoints;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTxtA_Status;
    private javax.swing.JTextField jTxtF_Car;
    private javax.swing.JTextField jTxtF_Name;
    private javax.swing.JTextField jTxtF_Team;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    class RaceDetails {

        private String name, location;
        private int cp, position;
        private String date;

//constructor
        RaceDetails(String name, int cp, int position) {
            this.name = name;
            this.cp = cp;
            this.position = position;
        }

        RaceDetails(String date, String location) {
            this.location = location;
            this.date = date;
        }

    }

    class DriverDetails {

        private String name, team, car;
        private int age, cp;
//constructor

        DriverDetails(String name, int age, String team, String car, int cp) {
            this.name = name;
            this.age = age;
            this.team = team;
            this.car = car;
            this.cp = cp;
        }
    }
// creates the comparator for comparing stock value

    class CPComparator implements Comparator<DriverDetails> {

        // override the compare() method
        @Override
        public int compare(DriverDetails s1, DriverDetails s2) {
            if (s1.cp == s2.cp) {
                return 0;
            } else if (s1.cp > s2.cp) {
                return -1;
            } else {
                return 1;
            }
        }

    }

    class PositionComparator implements Comparator<RaceDetails> {

        // override the compare() method
        @Override
        public int compare(RaceDetails s1, RaceDetails s2) {
            if (s1.position == s2.position) {
                return 0;
            } else if (s1.position > s2.position) {
                return 1;
            } else {
                return -1;
            }
        }

    }

    class DateComparator implements Comparator<RaceDetails> {

        // override the compare() method
        @Override
        public int compare(RaceDetails s1, RaceDetails s2) {
            //DD/MM/YYYY
            //01(2)34(5)6789
            //USE STRIP TO STRING like thing
            if (s1.date.equalsIgnoreCase(s2.date)) {
                return 0;
            } else if (Integer.parseInt(s1.date.substring(6, 9)) == Integer.parseInt(s2.date.substring(6, 9))) {
                if (Integer.parseInt(s1.date.substring(3, 4)) > Integer.parseInt(s2.date.substring(3, 4))) {
                    //same year, s1 is after s2
                    return -1;
                } else if (Integer.parseInt(s1.date.substring(3, 4)) < Integer.parseInt(s2.date.substring(3, 4))) {
                    //same year, s2 is after s1
                    return 1;
                } else {
                    if (Integer.parseInt(s1.date.substring(0, 1)) > Integer.parseInt(s2.date.substring(0, 1))) {
                        //same year, same month, s1 is after s2
                        return -1;
                    } else if (Integer.parseInt(s1.date.substring(0, 1)) < Integer.parseInt(s2.date.substring(0, 1))) {
                        //same year, same month, s2 is after s1
                        return 1;
                    }
                    return 0;
                }

            } else if (Integer.parseInt(s1.date.substring(6, 9)) > Integer.parseInt(s2.date.substring(6, 9))) {
                //year s1 after s2
                return -1;
            } else {
                //year s2 after s1
                return 1;
            }
        }
    }

    private void SaveCurrent() {
        try {
            try (Formatter driverDetails = new Formatter("Driver Details.txt")) {
                for (int i = 0; i < drivers.size(); i++) {
                    name = drivers.get(i).name;
                    age = drivers.get(i).age;
                    team = drivers.get(i).team;
                    car = drivers.get(i).car;
                    cp = drivers.get(i).cp;
                    driverDetails.format("%s\t%s\t%s\t%s\t%s\n", name, age, team, car, cp);
                }

            }
        } catch (FileNotFoundException e) {
            System.out.println("ERROR!!!!");
            System.out.println(e);
        }
    }

    private void LoadToCurrent() {

        drivers.removeAll(drivers);
        String[] line;
        try {
            File driverDetails = new File("Driver Details.txt");
            Scanner sc = new Scanner(driverDetails);
            while (sc.hasNext()) {
                line = sc.nextLine().split("\t");
                name = line[0];
                age = Integer.parseInt(line[1]);
                team = line[2];
                car = line[3];
                cp = Integer.parseInt(line[4]);

                drivers.add(new DriverDetails(name, age, team, car, cp));

            }
        } catch (FileNotFoundException e) {
            System.out.println("ERROR!!! @ LoadToCurrrent()");
        }

    }

    private void SaveSimulatedRace(int latestRace) {
        try {
            try (FileWriter simRaceDetails = new FileWriter("Simulated Race Details.txt", true); BufferedWriter b = new BufferedWriter(simRaceDetails); PrintWriter p = new PrintWriter(b);) {

                p.printf("""
                                          \nDate:     %s
                                          Location: %s
                                          Driver    CP  Position
                                          """, simRaceDL.get(latestRace).date, simRaceDL.get(latestRace).location);

                for (int i = 0; i < simRaceDrivers.get(latestRace).size(); i++) {
                    p.printf("""
                                          %s\t%d\t%d
                                          """,
                            simRaceDrivers.get(latestRace).get(i).name,
                            simRaceDrivers.get(latestRace).get(i).cp,
                            simRaceDrivers.get(latestRace).get(i).position);
                }
            } catch (IOException e) {
                System.out.println("ERROR!!!! @ SaveSimulatedRace() inside");
                System.out.println(e);
            }

        } catch (Exception e) {
            System.out.println("ERROR!!!! @ SaveSimulatedRace()");
            System.out.println(e);
        }
    }

    private void LoadSimulatedRace() {

        simRaceDrivers.removeAll(simRaceDrivers);
        simRaceDL.removeAll(simRaceDL);
        String line;
        try {
            File simRaceDetails = new File("Simulated Race Details.txt");
            Scanner sc = new Scanner(simRaceDetails);
            while (sc.hasNext()) {
                line = sc.nextLine();
                if (line.contains("Date")) {
//System.out.println("IN Date line");
                    date = line.substring(7);
                    location = sc.nextLine().substring(10);
                    simRaceDL.add(new RaceDetails(date, location));
                } else if (line.contains("Driver")) {
//System.out.println("Read Driver line");
                    simRaceDrivers.add(new ArrayList(3));
                    int currentElement = simRaceDrivers.size() - 1;

                    while (sc.hasNextLine()) {
//System.out.println("Splitting driver lines");
                        String readingLine = sc.nextLine();
                        if (readingLine.length() == 0) {
                            break;
                        }
                        String[] driverArr = readingLine.split("\t");
//System.out.println(Arrays.toString(driverArr));
                        simRaceDrivers.get(currentElement).add(new RaceDetails(driverArr[0],
                                Integer.parseInt(driverArr[1]),
                                Integer.parseInt(driverArr[2])));
                    }

                }
            }

        } catch (FileNotFoundException e) {
            System.out.println("ERROR!!! @ LoadSimulatedRace()");
        }

    }

    private void clearTableRows() {
        int rows = jTable1.getRowCount();
        DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
        while (rows != 0) {
            df.removeRow(0);
            rows--;
        }
    }
}
